@page "/"
@using MudBlazorWebApp2.Dialogs
@using MudBlazorWebApp2.Models
@using System.Diagnostics

@inject IDialogService DialogService



<MudCard Color="Color.Light" Style="background-color: whitesmoke;">
    <MudCardContent Style="background-color: darkslategray;">
        <MudText>Testing Dialog Data</MudText>
        <MudText Typo="Typo.body2">This is just a quick test to validate that I can get complex objects back from a dialog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary">https://github.com/markgriep/MudBlazorDialogTest</MudButton>
    </MudCardActions>
</MudCard>





@*  Simple dialog data transfer - Just a Okay or cancel comes back *@
<MudPaper Class="mt-5 pa-9">

    <MudButton @onclick="OpenSimpleDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
        Open plain Dialog
    </MudButton>

    <h4>@SimpleDialogResultMessage</h4>

 </MudPaper>


@*  Simple dialog data transfer - Just a STRING, and Okay or cancel comes back *@
<MudPaper Class="mt-5 pa-9">

    <MudButton @onclick="OpenStringDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
        Open _STRING_ Dialog
    </MudButton>

    <h4>@SimpleDialogStringResult</h4>

</MudPaper>


@*  Simple dialog data transfer - Just some strings in an object, also, Okay or cancel comes back *@
<MudPaper Class="mt-5 pa-9">

    <MudButton @onclick="OpenComplexDialogAsync" Variant="Variant.Filled" Color="Color.Surface">
        Open _POCO_ Dialog
    </MudButton>
   
    @if (ComplexDialogResultEmployee != null)
    {
        <h4>@ComplexDialogResultEmployee.Name</h4>
        <h4>@ComplexDialogResultEmployee.EmployeeId</h4>
        <h4>@ComplexDialogResultEmployee.Department</h4>
    }
    
</MudPaper>


@*  This is a more complicated dialog data transfer - A complex object comes back String, date, and int. *@
<MudPaper Class="mt-5 pa-9">

    <MudButton @onclick="OpenSuperComplexDialogAsync" Variant="Variant.Outlined" Color="Color.Warning">
        Open _SUPER COMPLEX_ Dialog
    </MudButton>

    @if (ComplexDialogResultEmployee != null)
    {
        <h4>@_SuperEmployee.EmployeeName</h4>
        <h4>@_SuperEmployee.EmployeeId</h4>
        <h4>@_SuperEmployee.EmployeeBirthDate</h4>
    }
   
</MudPaper>




@*  This one has validation with a complicated dialog data transfer  *@
<MudPaper Class="mt-5 pa-9">

    <MudButton @onclick="OpenCarDialogAsync" Variant="Variant.Outlined" Color="Color.Warning">
        Open Car Dialog
    </MudButton>

    @if (ComplexDialogResultEmployee != null)
    {
        <h4>@_ClassicCar.Year </h4>
        <h4>@_ClassicCar.Make </h4>
        <h4>@_ClassicCar.Model </h4>
        <h4>@_ClassicCar.OwnerName </h4>
        <h4>@_ClassicCar.Description </h4>
    } 

</MudPaper>







@code {
    //################################################################################################################################################
    //################################################################################################################################################
    //################################################################################################################################################
    //################################################################################################################################################
    //################################################################################################################################################
    //################################################################################################################################################
    //################################################################################################################################################
    //################################################################################################################################################

    private string SimpleDialogResultMessage { get; set; } = string.Empty;

    private string SimpleDialogStringResult { get; set; } = string.Empty;

    private string ComplexDialogResult { get; set; } = string.Empty;
    private Employee ComplexDialogResultEmployee = new Employee();

    private SuperEmployee _SuperEmployee = new SuperEmployee();
    
    private Car _ClassicCar = new Car();




    /// <summary>
    /// CAR complex object that supposedly has validation baked in
    /// </summary>
    /// <returns></returns>
    private async Task OpenCarDialogAsync()
    {
        var TheDialog = DialogService.Show<CarDialog>("Classic Car");
        var DialogResult = await TheDialog.Result;

        if (DialogResult.Canceled)
        {
            ComplexDialogResult = "Dialog was cancellllllled.";
        }
        else
        {
            _ClassicCar = DialogResult.Data as Car;
            ComplexDialogResult =
            $"Name: {_ClassicCar?.Year}, Model: {_ClassicCar?.Make}, Name: {_ClassicCar?.Model},    Name: {_ClassicCar?.OwnerName}";
        }
    }








    /// <summary>
    /// Complex object  STRING, INT, DATETime
    /// </summary>
    /// <returns></returns>
    private async Task OpenSuperComplexDialogAsync()
    {
        var TheDialog = DialogService.Show<SuperComplexEmployeeDialog>("Super Employee");
        var DialogResult = await TheDialog.Result;

        if (DialogResult.Canceled)
        {
            ComplexDialogResult = "Dialog was cancellllllled.";
        }
        else
        {
            _SuperEmployee = DialogResult.Data as SuperEmployee;
            ComplexDialogResult = $"Name: {_SuperEmployee.EmployeeName},    Bday: {_SuperEmployee.EmployeeBirthDate},    EmployeeId: {_SuperEmployee.EmployeeId}";
        }
    }




    /// <summary>
    /// Simple but complex object.  Multi string object
    /// </summary>
    /// <returns></returns>
    private async Task OpenComplexDialogAsync()
    {
        var TheDialog = DialogService.Show<ComplexEmployeeDialog>("This is a POCO Dialog");
        var DialogResult = await TheDialog.Result;

        if (DialogResult.Canceled)
        {
            ComplexDialogResult = "Dialog was cancellllllled.";
        }
        else
        {
            ComplexDialogResultEmployee = DialogResult.Data as Employee;
            ComplexDialogResult = $"Name: {ComplexDialogResultEmployee?.Name},    Department: {ComplexDialogResultEmployee?.Department},    EmployeeId: {ComplexDialogResultEmployee?.EmployeeId}";
            Debug.WriteLine("");


        }
    }


    /// <summary>
    /// Just a string comes back
    /// </summary>
    /// <returns></returns>
    private async Task OpenStringDialogAsync()
    {
        var TheDialog = DialogService.Show<StringDialog>();
        var DialogResult = await TheDialog.Result;

        if (DialogResult.Canceled)
        {
            SimpleDialogStringResult = "STRING Dialog was cancellllllled.";
        }
        else
        {
            SimpleDialogStringResult = $"You Entered: {DialogResult.Data?.ToString()}";
        }
    }




    /// <summary>
    /// Just ok or cancel comes back
    /// </summary>
    /// <returns></returns>
    private async Task OpenSimpleDialogAsync()
    {
        var TheDialog = DialogService.Show<SimpleDialog>();
        var DialogResult = await TheDialog.Result;

        if (DialogResult.Canceled)
        {
            SimpleDialogResultMessage = "Dialog was cancellllllled.";
        }
        else
        {
            SimpleDialogResultMessage = "Dialog returned Ok.";
        }
    }






}

